---

name: Node.js CI

on:
  push:

  release:
    types: [published]

jobs:

  ci:
    # See here for details of available tools, e.g. cli
    # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners#ubuntu-1804-lts
    runs-on: ubuntu-latest
    env:
      ENV_CI: true
      JOB_SCOPED_ENV_VAR_1: job_scoped_env_val_1
      JOB_SCOPED_ENV_VAR_2: job_scoped_env_val_2
      MY_ENV: DEV
      SAML2_AWS_MIN_SESSION_DURATION: 1000
      ENV_CONTEXT: .env.dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node env
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/contexts-and-expression-syntax-for-github-actions
      # nb: Be careful, context can contain github.token, (nb: it will be masked if dumped to the screen)
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "GITHUB_CONTEXT=[$GITHUB_CONTEXT]"
          env | sort

      # When using the "releases" feature, the build will be triggered twice:
      #   - With a push event, with the ref set to a tag, e.g. v1.9.1
      #   - with a release event, also with the ref set to a tag
      # This action will retrieve the ACTUAL branch name to be used for the build.
      # nb: During the release event, the ACTUAL branch name is stored in github.event.target_commitish
      - name: Set Branch Name
        run: |
          export EVENT_NAME="${{  github.event_name }}"
          #echo ${{ github.event.release.body }}
          export TARGET_COMMITISH=""
          export GIT_REF="${{ github.ref }}"
          export GIT_COMMIT="${{ github.sha }}"

          # The "commitish" property is only available on releases
          [[ "release" == "${EVENT_NAME}" ]] && TARGET_COMMITISH="${{ github.event.release.target_commitish }}"

          echo "TARGET_COMMITISH:[${TARGET_COMMITISH}]"
          echo "GIT_REF:[${GIT_REF}]"
          echo "GIT_COMMIT:[${GIT_COMMIT}]"

          export GIT_BRANCH=$(make set-git-branch GIT_REF="${GIT_REF}" GIT_COMMIT="${GIT_COMMIT}" GIT_COMMITISH="${TARGET_COMMITISH}")
          echo "GIT_BRANCH:[${GIT_BRANCH}]"
          echo "::set-env name=GIT_BRANCH::${GIT_BRANCH}"

      # When using the "releases" feature, the build will be triggered twice:
      # The 2nd build will be a "push" event, with a tag, since the "release" event will already be
      # building (and deploying) we will cancel the "push" event.
      - name: Cancel Redundant Build?
        if: github.event_name == 'push'
        run: |
          # Cancel the build, if it's a push AND a tag
          export GIT_REF="${{ github.ref }}"
          echo "GIT_REF:[${GIT_REF}]"
          grep -q "refs/tags" <<< $GIT_REF && echo "Match, cancelling job" && exit 1
          echo "END"

      ## If this is a "release" event, we should push to a PROD env
      - name: Set Target Env
        if: startsWith('release', github.event_name)
        run: |
          export ENV_TARGET=$(echo "${{ github.event.release.body }}" | awk 'BEGIN {FS="="} {split($2,a," "); print a[1]}')
          echo "ENV_TARGET=${ENV_TARGET}"
          echo "::set-env name=ENV_CONTEXT::.env.${ENV_TARGET}"

      # curl -X POST "https://api.github.com/repos/micklove/ml-actions/runs/${{ github.run_id }}
      - name: Cancel push run for a tag event
        if: startsWith('refs/tags', github.ref) && github.event_name == 'push'
        run: |
          echo Cancelling myself...
          curl -X POST "https://api.github.com/repos/micklove/ml-actions/runs/${{ github.run_id }} -H "Content-Type: application/json" -H "Authorization: token ${{ github.token }}"

      - name: Create manifest file for build
        run: |
          make -e artifacts/manifest/manifest.txt

      - name: bats unit tests TODO
        run: |
          echo "TODO - install bats and run tests with make -e tests"

      - name: Upload manifest file to artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: manifest.txt
          path: artifacts/manifest

      - name: saml2aws install
        run: |
          make -e saml2aws-install
          echo "::add-path::$HOME/.local/bin"

      ## Example of using configure (not, with dummy values only here!!)
      - name: saml2aws configure
        run: |
          make -e saml2aws-configure IDP_URL="${{ secrets.IDP_URL }}" USERNAME="${{ secrets.USERNAME }}" SAML2_AWS_MIN_SESSION_DURATION="${SAML2_AWS_MIN_SESSION_DURATION}"
          cat ~/.saml2aws

      ## Example of using logging in, using saml2aws (again, dummy only)
      - name: saml2aws login
        run: |
          echo example command
          echo make saml2aws-login PASS=BLAHBLAH


      # Using conditions / variables
      # Set an env var https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-environment-variable-set-env
      # e.g. github.ref = refs/heads/master
      #
      - name: Set env to prod
        if: endsWith(github.ref, '/master')
        run: |
          echo "::set-env name=MY_ENV::PROD"

      - name: Dump env vars
        run: make -e dump

      - name: Docker Version
        run: docker --version

      - name: envsubst version check
        run: envsubst --version

      - name: Install
        run: make -e reinstall

      # # See https://medium.com/henngeblog/github-actions-in-action-528d205da316
      - name: SAM Install
        run: |
          echo PATH=$PATH
          make -e sam-install
          echo "::add-path::$HOME/.local/bin"

      - name: SAM Details
        run: |
          echo PATH=$PATH
          sam --version

      - name: SAM Build
        run: make -e sam-build

      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Quality
        env:
          STEP_SCOPED_ENV_VAR_1: step_scoped_env_val_1
          STEP_SCOPED_ENV_VAR_2: step_scoped_env_val_2
        run: make -e code-quality

      - name: Test
        run: make -e test

  cd:
    runs-on: ubuntu-latest
    needs: [ci]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node env
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Deploy API
        run: make -e deploy-api

      - name: Deploy UI
        run: make -e deploy-ui

      - name: Test - Infra
        run: make -e infra-test

      - name: Test - Acceptance
        run: make -e acceptance-test
